/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * atcoder-editorial-problems-api
 * A definition of AtCoder Editorial Problems API.
 * OpenAPI spec version: 1.0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';
import { customInstance } from '../../../../config/axios';
import type { WritersResponse } from '../../models';

/**
 * @summary get all writers
 */
export const getWriters = (signal?: AbortSignal) => {
  return customInstance<WritersResponse>({
    url: `/writers`,
    method: 'GET',
    signal,
  });
};

export const getGetWritersQueryKey = () => {
  return [`/writers`] as const;
};

export const getGetWritersQueryOptions = <
  TData = Awaited<ReturnType<typeof getWriters>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getWriters>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWritersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWriters>>> = ({
    signal,
  }) => getWriters(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWriters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWritersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWriters>>
>;
export type GetWritersQueryError = void;

export function useGetWriters<
  TData = Awaited<ReturnType<typeof getWriters>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getWriters>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getWriters>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWriters<
  TData = Awaited<ReturnType<typeof getWriters>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getWriters>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getWriters>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWriters<
  TData = Awaited<ReturnType<typeof getWriters>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getWriters>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary get all writers
 */

export function useGetWriters<
  TData = Awaited<ReturnType<typeof getWriters>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getWriters>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetWritersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
