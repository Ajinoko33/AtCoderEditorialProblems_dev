/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * atcoder-editorial-problems-api
 * A definition of AtCoder Editorial Problems API.
 * OpenAPI spec version: 1.0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';
import { customInstance } from '../../../../config/axios';
import type { GetProblemsParams, ProblemsResponse } from '../../models';

/**
 * @summary get problems with selected writer
 */
export const getProblems = (
  params?: GetProblemsParams,
  signal?: AbortSignal,
) => {
  return customInstance<ProblemsResponse>({
    url: `/problems`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetProblemsQueryKey = (params?: GetProblemsParams) => {
  return [`/problems`, ...(params ? [params] : [])] as const;
};

export const getGetProblemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProblems>>,
  TError = void,
>(
  params?: GetProblemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProblems>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProblemsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProblems>>> = ({
    signal,
  }) => getProblems(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProblems>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProblemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProblems>>
>;
export type GetProblemsQueryError = void;

export function useGetProblems<
  TData = Awaited<ReturnType<typeof getProblems>>,
  TError = void,
>(
  params: undefined | GetProblemsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProblems>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProblems>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetProblems<
  TData = Awaited<ReturnType<typeof getProblems>>,
  TError = void,
>(
  params?: GetProblemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProblems>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProblems>>,
          TError,
          TData
        >,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetProblems<
  TData = Awaited<ReturnType<typeof getProblems>>,
  TError = void,
>(
  params?: GetProblemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProblems>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary get problems with selected writer
 */

export function useGetProblems<
  TData = Awaited<ReturnType<typeof getProblems>>,
  TError = void,
>(
  params?: GetProblemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProblems>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetProblemsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
